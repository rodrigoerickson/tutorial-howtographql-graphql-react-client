{"ast":null,"code":"import _classCallCheck from \"/home/cin_rosilva/app/pessoal/github/graphql-react-client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cin_rosilva/app/pessoal/github/graphql-react-client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { listagem, comentario, like as _like, notifica } from '../actions/actionCreator';\n\nvar TimelineApi =\n/*#__PURE__*/\nfunction () {\n  function TimelineApi() {\n    _classCallCheck(this, TimelineApi);\n  }\n\n  _createClass(TimelineApi, null, [{\n    key: \"lista\",\n    value: function lista(urlPerfil) {\n      return function (dispatch) {\n        fetch(urlPerfil).then(function (response) {\n          return response.json();\n        }).then(function (fotos) {\n          dispatch(listagem(fotos));\n          return fotos;\n        });\n      };\n    }\n  }, {\n    key: \"comenta\",\n    value: function comenta(fotoId, textoComentario) {\n      return function (dispatch) {\n        fetch(\"http://localhost:8080/api/fotos/\".concat(fotoId, \"/comment?X-AUTH-TOKEN=\").concat(localStorage.getItem('auth-token')), {\n          method: 'POST',\n          body: JSON.stringify({\n            texto: textoComentario\n          }),\n          headers: new Headers({\n            'Content-type': 'application/json'\n          })\n        }).then(function (response) {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error('não foi possível comentar');\n          }\n        }).then(function (novoComentario) {\n          dispatch(comentario(fotoId, novoComentario));\n          return novoComentario;\n        });\n      };\n    }\n  }, {\n    key: \"like\",\n    value: function like(fotoId) {\n      return function (dispatch) {\n        fetch(\"http://localhost:8080/api/fotos/\".concat(fotoId, \"/like?X-AUTH-TOKEN=\").concat(localStorage.getItem('auth-token')), {\n          method: 'POST'\n        }).then(function (response) {\n          if (response.ok) {\n            return response.json();\n          } else {\n            throw new Error(\"Não foi possível faze o like da foto\");\n          }\n        }).then(function (liker) {\n          dispatch(_like(fotoId, liker));\n          return liker;\n        });\n      };\n    }\n  }, {\n    key: \"pesquisa\",\n    value: function pesquisa(login) {\n      return function (dispatch) {\n        fetch(\"http://localhost:8080/api/public/fotos/\".concat(login)).then(function (response) {\n          return response.json();\n        }).then(function (fotos) {\n          if (fotos.length === 0) {\n            dispatch(notifica('usuário não encontrado'));\n          } else {\n            dispatch(notifica('usuário encontrado'));\n          }\n\n          dispatch(listagem(fotos));\n          return fotos;\n        });\n      };\n    }\n  }]);\n\n  return TimelineApi;\n}();\n\nexport { TimelineApi as default };","map":{"version":3,"sources":["/home/cin_rosilva/app/pessoal/github/graphql-react-client/src/logicas/TimelineApi.js"],"names":["listagem","comentario","like","notifica","TimelineApi","urlPerfil","dispatch","fetch","then","response","json","fotos","fotoId","textoComentario","localStorage","getItem","method","body","JSON","stringify","texto","headers","Headers","ok","Error","novoComentario","liker","login","length"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,EAA8BC,IAAI,IAAJA,KAA9B,EAAoCC,QAApC,QAAmD,0BAAnD;;IAEqBC,W;;;;;;;;;0BAEJC,S,EAAW;AACpB,aAAO,UAAAC,QAAQ,EAAI;AACfC,QAAAA,KAAK,CAACF,SAAD,CAAL,CACKG,IADL,CACU,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SADlB,EAEKF,IAFL,CAEU,UAAAG,KAAK,EAAI;AACXL,UAAAA,QAAQ,CAACN,QAAQ,CAACW,KAAD,CAAT,CAAR;AACA,iBAAOA,KAAP;AACH,SALL;AAMH,OAPD;AAQH;;;4BAEcC,M,EAAQC,e,EAAiB;AACpC,aAAO,UAAAP,QAAQ,EAAI;AACfC,QAAAA,KAAK,2CAAoCK,MAApC,mCAAmEE,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAnE,GACD;AACIC,UAAAA,MAAM,EAAE,MADZ;AAEIC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEC,YAAAA,KAAK,EAAEP;AAAT,WAAf,CAFV;AAGIQ,UAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,4BAAgB;AADC,WAAZ;AAHb,SADC,CAAL,CAQKd,IARL,CAQU,UAAAC,QAAQ,EAAI;AACd,cAAIA,QAAQ,CAACc,EAAb,EAAiB;AACb,mBAAOd,QAAQ,CAACC,IAAT,EAAP;AACH,WAFD,MAEO;AACH,kBAAM,IAAIc,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ,SAdL,EAcOhB,IAdP,CAcY,UAAAiB,cAAc,EAAI;AACtBnB,UAAAA,QAAQ,CAACL,UAAU,CAACW,MAAD,EAASa,cAAT,CAAX,CAAR;AACA,iBAAOA,cAAP;AACH,SAjBL;AAkBH,OAnBD;AAqBH;;;yBAEWb,M,EAAQ;AAEhB,aAAO,UAAAN,QAAQ,EAAI;AACfC,QAAAA,KAAK,2CAAoCK,MAApC,gCAAgEE,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAhE,GACD;AAAEC,UAAAA,MAAM,EAAE;AAAV,SADC,CAAL,CAEKR,IAFL,CAEU,UAAAC,QAAQ,EAAI;AACd,cAAIA,QAAQ,CAACc,EAAb,EAAiB;AACb,mBAAOd,QAAQ,CAACC,IAAT,EAAP;AACH,WAFD,MAEO;AACH,kBAAM,IAAIc,KAAJ,CAAU,sCAAV,CAAN;AACH;AACJ,SARL,EASKhB,IATL,CASU,UAAAkB,KAAK,EAAI;AACXpB,UAAAA,QAAQ,CAACJ,KAAI,CAACU,MAAD,EAASc,KAAT,CAAL,CAAR;AACA,iBAAOA,KAAP;AACH,SAZL;AAaH,OAdD;AAgBH;;;6BAEgBC,K,EAAM;AACnB,aAAO,UAAArB,QAAQ,EAAI;AACfC,QAAAA,KAAK,kDAA2CoB,KAA3C,EAAL,CACKnB,IADL,CACU,UAAAC,QAAQ;AAAA,iBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,SADlB,EAEKF,IAFL,CAEU,UAAAG,KAAK,EAAI;AACX,cAAGA,KAAK,CAACiB,MAAN,KAAiB,CAApB,EAAsB;AAClBtB,YAAAA,QAAQ,CAACH,QAAQ,CAAC,wBAAD,CAAT,CAAR;AACH,WAFD,MAEK;AACDG,YAAAA,QAAQ,CAACH,QAAQ,CAAC,oBAAD,CAAT,CAAR;AACH;;AACDG,UAAAA,QAAQ,CAACN,QAAQ,CAACW,KAAD,CAAT,CAAR;AACA,iBAAOA,KAAP;AACP,SAVD;AAWH,OAZD;AAaH;;;;;;SAvEgBP,W","sourcesContent":["import {listagem, comentario, like, notifica} from '../actions/actionCreator'\n\nexport default class TimelineApi {\n\n    static lista(urlPerfil) {\n        return dispatch => {\n            fetch(urlPerfil)\n                .then(response => response.json())\n                .then(fotos => {\n                    dispatch(listagem(fotos));\n                    return fotos;\n                });\n        }\n    }\n\n    static comenta(fotoId, textoComentario) {\n        return dispatch => {\n            fetch(`http://localhost:8080/api/fotos/${fotoId}/comment?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({ texto: textoComentario }),\n                    headers: new Headers({\n                        'Content-type': 'application/json'\n                    })\n                })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error('não foi possível comentar')\n                    }\n                }).then(novoComentario => {\n                    dispatch(comentario(fotoId, novoComentario))\n                    return novoComentario;\n                })\n        }\n\n    }\n\n    static like(fotoId) {\n\n        return dispatch => {\n            fetch(`http://localhost:8080/api/fotos/${fotoId}/like?X-AUTH-TOKEN=${localStorage.getItem('auth-token')}`,\n                { method: 'POST' })\n                .then(response => {\n                    if (response.ok) {\n                        return response.json();\n                    } else {\n                        throw new Error(\"Não foi possível faze o like da foto\")\n                    }\n                })\n                .then(liker => {\n                    dispatch(like(fotoId, liker))\n                    return liker;\n                })\n        }\n\n    }\n\n    static pesquisa (login){\n        return dispatch => {\n            fetch(`http://localhost:8080/api/public/fotos/${login}`)\n                .then(response => response.json())\n                .then(fotos => {\n                    if(fotos.length === 0){\n                        dispatch(notifica('usuário não encontrado'))\n                    }else{\n                        dispatch(notifica('usuário encontrado'))    \n                    }\n                    dispatch(listagem(fotos))\n                    return fotos;\n            });\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}