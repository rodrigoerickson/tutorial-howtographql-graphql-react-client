{"ast":null,"code":"import { List } from 'immutable';\n\nfunction trocaFoto(lista, fotoId, callBackAtualizaPropriedades) {\n  var fotoEstadoAntigo = lista.find(function (foto) {\n    return foto.id === fotoId;\n  });\n  var novasPropriedades = callBackAtualizaPropriedades(fotoEstadoAntigo);\n  var fotoEstadoNovo = Object.assign({}, fotoEstadoAntigo, novasPropriedades);\n  var indiceDaLista = lista.findIndex(function (foto) {\n    return foto.id === fotoId;\n  });\n  return lista.set(indiceDaLista, fotoEstadoNovo);\n}\n\nexport function timeline() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new List();\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'LISTAGEM') {\n    return new List(action.fotos);\n  }\n\n  if (action.type === 'COMENTARIO') {\n    return trocaFoto(state, action.fotoId, function (fotoEstadoAntigo) {\n      var novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario);\n      return {\n        comentarios: novosComentarios\n      };\n    });\n  }\n\n  if (action.type === 'LIKE') {\n    return trocaFoto(state, action.fotoId, function (fotoEstadoAntigo) {\n      var likeada = !fotoEstadoAntigo.likeada;\n      var liker = action.liker;\n      var possivelLiker = fotoEstadoAntigo.likers.find(function (likerAtual) {\n        return likerAtual.login === liker.login;\n      });\n      var novosLikers;\n\n      if (possivelLiker === undefined) {\n        novosLikers = fotoEstadoAntigo.likers.concat(liker);\n      } else {\n        novosLikers = fotoEstadoAntigo.likers.filter(function (likerAtual) {\n          return likerAtual.login !== liker.login;\n        });\n      }\n\n      return {\n        likeada: likeada,\n        likers: novosLikers\n      };\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/cin_rosilva/app/pessoal/github/graphql-react-client/src/reducers/timeline.js"],"names":["List","trocaFoto","lista","fotoId","callBackAtualizaPropriedades","fotoEstadoAntigo","find","foto","id","novasPropriedades","fotoEstadoNovo","Object","assign","indiceDaLista","findIndex","set","timeline","state","action","type","fotos","novosComentarios","comentarios","concat","novoComentario","likeada","liker","possivelLiker","likers","likerAtual","login","novosLikers","undefined","filter"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,WAAnB;;AAEA,SAASC,SAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,4BAAnC,EAAiE;AAC7D,MAAMC,gBAAgB,GAAGH,KAAK,CAACI,IAAN,CAAW,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAL,KAAYL,MAAhB;AAAA,GAAf,CAAzB;AACA,MAAMM,iBAAiB,GAAGL,4BAA4B,CAACC,gBAAD,CAAtD;AACA,MAAMK,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,gBAAlB,EAAoCI,iBAApC,CAAvB;AACA,MAAMI,aAAa,GAAGX,KAAK,CAACY,SAAN,CAAgB,UAAAP,IAAI;AAAA,WAAIA,IAAI,CAACC,EAAL,KAAYL,MAAhB;AAAA,GAApB,CAAtB;AACA,SAAOD,KAAK,CAACa,GAAN,CAAUF,aAAV,EAAyBH,cAAzB,CAAP;AACH;;AAED,OAAO,SAASM,QAAT,GAA6C;AAAA,MAA3BC,KAA2B,uEAApB,IAAIjB,IAAJ,EAAoB;AAAA,MAARkB,MAAQ;;AAChD,MAAGA,MAAM,CAACC,IAAP,KAAgB,UAAnB,EAA8B;AAC1B,WAAO,IAAInB,IAAJ,CAASkB,MAAM,CAACE,KAAhB,CAAP;AACH;;AAED,MAAGF,MAAM,CAACC,IAAP,KAAgB,YAAnB,EAAgC;AAC5B,WAAOlB,SAAS,CAACgB,KAAD,EAAQC,MAAM,CAACf,MAAf,EAAuB,UAAAE,gBAAgB,EAAI;AACvD,UAAMgB,gBAAgB,GAAGhB,gBAAgB,CAACiB,WAAjB,CAA6BC,MAA7B,CAAoCL,MAAM,CAACM,cAA3C,CAAzB;AACA,aAAO;AAACF,QAAAA,WAAW,EAACD;AAAb,OAAP;AACH,KAHe,CAAhB;AAIH;;AAED,MAAGH,MAAM,CAACC,IAAP,KAAgB,MAAnB,EAA0B;AACtB,WAAOlB,SAAS,CAACgB,KAAD,EAAQC,MAAM,CAACf,MAAf,EAAuB,UAAAE,gBAAgB,EAAI;AACvD,UAAMoB,OAAO,GAAG,CAACpB,gBAAgB,CAACoB,OAAlC;AACA,UAAMC,KAAK,GAAGR,MAAM,CAACQ,KAArB;AACA,UAAMC,aAAa,GAAGtB,gBAAgB,CAACuB,MAAjB,CAAwBtB,IAAxB,CAA6B,UAAAuB,UAAU;AAAA,eAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAA/B;AAAA,OAAvC,CAAtB;AAEA,UAAIC,WAAJ;;AACA,UAAIJ,aAAa,KAAKK,SAAtB,EAAiC;AAC7BD,QAAAA,WAAW,GAAG1B,gBAAgB,CAACuB,MAAjB,CAAwBL,MAAxB,CAA+BG,KAA/B,CAAd;AACH,OAFD,MAEO;AACHK,QAAAA,WAAW,GAAG1B,gBAAgB,CAACuB,MAAjB,CAAwBK,MAAxB,CAA+B,UAAAJ,UAAU;AAAA,iBAAIA,UAAU,CAACC,KAAX,KAAqBJ,KAAK,CAACI,KAA/B;AAAA,SAAzC,CAAd;AACH;;AAED,aAAO;AAACL,QAAAA,OAAO,EAAPA,OAAD;AAAUG,QAAAA,MAAM,EAACG;AAAjB,OAAP;AACH,KAbe,CAAhB;AAeH;;AACD,SAAOd,KAAP;AACH","sourcesContent":["import {List} from 'immutable'\n\nfunction trocaFoto (lista, fotoId, callBackAtualizaPropriedades) {\n    const fotoEstadoAntigo = lista.find(foto => foto.id === fotoId);\n    const novasPropriedades = callBackAtualizaPropriedades(fotoEstadoAntigo);\n    const fotoEstadoNovo = Object.assign({}, fotoEstadoAntigo, novasPropriedades)\n    const indiceDaLista = lista.findIndex(foto => foto.id === fotoId)\n    return lista.set(indiceDaLista, fotoEstadoNovo)\n}\n\nexport function timeline(state= new List(), action) {\n    if(action.type === 'LISTAGEM'){\n        return new List(action.fotos)\n    }\n\n    if(action.type === 'COMENTARIO'){\n        return trocaFoto(state, action.fotoId, fotoEstadoAntigo => {\n            const novosComentarios = fotoEstadoAntigo.comentarios.concat(action.novoComentario);\n            return {comentarios:novosComentarios};\n        });\n    }\n\n    if(action.type === 'LIKE'){\n        return trocaFoto(state, action.fotoId, fotoEstadoAntigo => {\n            const likeada = !fotoEstadoAntigo.likeada;\n            const liker = action.liker;\n            const possivelLiker = fotoEstadoAntigo.likers.find(likerAtual => likerAtual.login === liker.login);\n            \n            let novosLikers;\n            if (possivelLiker === undefined) {\n                novosLikers = fotoEstadoAntigo.likers.concat(liker);\n            } else {\n                novosLikers = fotoEstadoAntigo.likers.filter(likerAtual => likerAtual.login !== liker.login)\n            }\n\n            return {likeada, likers:novosLikers}\n        });\n        \n    }\n    return state\n}"]},"metadata":{},"sourceType":"module"}